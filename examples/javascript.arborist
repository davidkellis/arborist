# This grammar is based on https://raw.githubusercontent.com/pegjs/pegjs/master/examples/javascript.pegjs

javascript {

  // JavaScript Grammar
  // ==================
  //
  // Based on grammar from ECMA-262, 5.1 Edition [1]. Generated parser builds a
  // syntax tree compatible with the ESTree spec [2].
  //
  // Limitations:
  //
  //   * Non-BMP characters are completely ignored to avoid surrogate pair
  //     handling.
  //
  //   * One can create identifiers containing illegal characters using Unicode
  //     escape sequences. For example, "abcd\u0020efgh" is not a valid
  //     identifier, but it is accepted by the parser.
  //
  //   * Strict mode is not recognized. This means that within strict mode code,
  //     "implements", "interface", "let", "package", "private", "protected",
  //     "public", "static" and "yield" can be used as names. Many other
  //     restrictions and exceptions from Annex C are also not applied.
  //
  // All the limitations could be resolved, but the costs would likely outweigh
  // the benefits.
  //
  // Many thanks to inimino [3] for his grammar [4] which helped me to solve some
  // problems (such as automatic semicolon insertion) and also served to double
  // check that I converted the original grammar correctly.
  //
  // [1] http://www.ecma-international.org/publications/standards/Ecma-262.htm
  // [2] https://github.com/estree/estree
  // [3] http://inimino.org/~inimino/blog/
  // [4] http://boshi.inimino.org/3box/asof/1270029991384/PEG/ECMAScript_unified.peg

  Start
    <- __ program:Program __ { return program; }

  // ----- A.1 Lexical Grammar -----

  SourceCharacter
    <- .

  WhiteSpace "whitespace"
    <- "\t"
    / "\v"
    / "\f"
    / " "
    / "\u00A0"
    / "\uFEFF"
    / Zs

  LineTerminator
    <- [\n\r\u2028\u2029]

  LineTerminatorSequence "end of line"
    <- "\n"
    / "\r\n"
    / "\r"
    / "\u2028"
    / "\u2029"

  Comment "comment"
    <- MultiLineComment
    / SingleLineComment

  MultiLineComment
    <- "/*" (!"*/" SourceCharacter)* "*/"

  MultiLineCommentNoLineTerminator
    <- "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

  SingleLineComment
    <- "//" (!LineTerminator SourceCharacter)*

  Identifier
    <- !ReservedWord name:IdentifierName { return name; }

  IdentifierName "identifier"
    <- head:IdentifierStart tail:IdentifierPart* {
        return {
          type: "Identifier",
          name: head + tail.join("")
        };
      }

  IdentifierStart
    <- UnicodeLetter
    / "$"
    / "_"
    / "\\" sequence:UnicodeEscapeSequence { return sequence; }

  IdentifierPart
    <- IdentifierStart
    / UnicodeCombiningMark
    / UnicodeDigit
    / UnicodeConnectorPunctuation
    / "\u200C"
    / "\u200D"

  UnicodeLetter
    <- Lu
    / Ll
    / Lt
    / Lm
    / Lo
    / Nl

  UnicodeCombiningMark
    <- Mn
    / Mc

  UnicodeDigit
    <- Nd

  UnicodeConnectorPunctuation
    <- Pc

  ReservedWord
    <- Keyword
    / FutureReservedWord
    / NullLiteral
    / BooleanLiteral

  Keyword
    <- BreakToken
    / CaseToken
    / CatchToken
    / ContinueToken
    / DebuggerToken
    / DefaultToken
    / DeleteToken
    / DoToken
    / ElseToken
    / FinallyToken
    / ForToken
    / FunctionToken
    / IfToken
    / InstanceofToken
    / InToken
    / NewToken
    / ReturnToken
    / SwitchToken
    / ThisToken
    / ThrowToken
    / TryToken
    / TypeofToken
    / VarToken
    / VoidToken
    / WhileToken
    / WithToken

  FutureReservedWord
    <- ClassToken
    / ConstToken
    / EnumToken
    / ExportToken
    / ExtendsToken
    / ImportToken
    / SuperToken

  Literal
    <- NullLiteral
    / BooleanLiteral
    / NumericLiteral
    / StringLiteral
    / RegularExpressionLiteral

  NullLiteral
    <- NullToken { return { type: "Literal", value: null }; }

  BooleanLiteral
    <- TrueToken  { return { type: "Literal", value: true  }; }
    / FalseToken { return { type: "Literal", value: false }; }

  // The "!(IdentifierStart / DecimalDigit)" predicate is not part of the official
  // grammar, it comes from text in section 7.8.3.
  NumericLiteral "number"
    <- literal:HexIntegerLiteral !(IdentifierStart / DecimalDigit) {
        return literal;
      }
    / literal:DecimalLiteral !(IdentifierStart / DecimalDigit) {
        return literal;
      }

  DecimalLiteral
    <- DecimalIntegerLiteral "." DecimalDigit* ExponentPart? {
        return { type: "Literal", value: parseFloat(text()) };
      }
    / "." DecimalDigit+ ExponentPart? {
        return { type: "Literal", value: parseFloat(text()) };
      }
    / DecimalIntegerLiteral ExponentPart? {
        return { type: "Literal", value: parseFloat(text()) };
      }

  DecimalIntegerLiteral
    <- "0"
    / NonZeroDigit DecimalDigit*

  DecimalDigit
    <- [0-9]

  NonZeroDigit
    <- [1-9]

  ExponentPart
    <- ExponentIndicator SignedInteger

  ExponentIndicator
    <- "e"i

  SignedInteger
    <- [+-]? DecimalDigit+

  HexIntegerLiteral
    <- "0x"i digits:$HexDigit+ {
        return { type: "Literal", value: parseInt(digits, 16) };
      }

  HexDigit
    <- [0-9a-f]i

  StringLiteral "string"
    <- '"' chars:DoubleStringCharacter* '"' {
        return { type: "Literal", value: chars.join("") };
      }
    / "'" chars:SingleStringCharacter* "'" {
        return { type: "Literal", value: chars.join("") };
      }

  DoubleStringCharacter
    <- !('"' / "\\" / LineTerminator) SourceCharacter { return text(); }
    / "\\" sequence:EscapeSequence { return sequence; }
    / LineContinuation

  SingleStringCharacter
    <- !("'" / "\\" / LineTerminator) SourceCharacter { return text(); }
    / "\\" sequence:EscapeSequence { return sequence; }
    / LineContinuation

  LineContinuation
    <- "\\" LineTerminatorSequence { return ""; }

  EscapeSequence
    <- CharacterEscapeSequence
    / "0" !DecimalDigit { return "\0"; }
    / HexEscapeSequence
    / UnicodeEscapeSequence

  CharacterEscapeSequence
    <- SingleEscapeCharacter
    / NonEscapeCharacter

  SingleEscapeCharacter
    <- "'"
    / '"'
    / "\\"
    / "b"  { return "\b"; }
    / "f"  { return "\f"; }
    / "n"  { return "\n"; }
    / "r"  { return "\r"; }
    / "t"  { return "\t"; }
    / "v"  { return "\v"; }

  NonEscapeCharacter
    <- !(EscapeCharacter / LineTerminator) SourceCharacter { return text(); }

  EscapeCharacter
    <- SingleEscapeCharacter
    / DecimalDigit
    / "x"
    / "u"

  HexEscapeSequence
    <- "x" digits:$(HexDigit HexDigit) {
        return String.fromCharCode(parseInt(digits, 16));
      }

  UnicodeEscapeSequence
    <- "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
        return String.fromCharCode(parseInt(digits, 16));
      }

  RegularExpressionLiteral "regular expression"
    <- "/" pattern:$RegularExpressionBody "/" flags:$RegularExpressionFlags {
        var value;

        try {
          value <- new RegExp(pattern, flags);
        } catch (e) {
          error(e.message);
        }

        return { type: "Literal", value: value };
      }

  RegularExpressionBody
    <- RegularExpressionFirstChar RegularExpressionChar*

  RegularExpressionFirstChar
    <- ![*\\/[] RegularExpressionNonTerminator
    / RegularExpressionBackslashSequence
    / RegularExpressionClass

  RegularExpressionChar
    <- ![\\/[] RegularExpressionNonTerminator
    / RegularExpressionBackslashSequence
    / RegularExpressionClass

  RegularExpressionBackslashSequence
    <- "\\" RegularExpressionNonTerminator

  RegularExpressionNonTerminator
    <- !LineTerminator SourceCharacter

  RegularExpressionClass
    <- "[" RegularExpressionClassChar* "]"

  RegularExpressionClassChar
    <- ![\]\\] RegularExpressionNonTerminator
    / RegularExpressionBackslashSequence

  RegularExpressionFlags
    <- IdentifierPart*

  // Unicode Character Categories
  //
  // Extracted from the following Unicode Character Database file:
  //
  //   http://www.unicode.org/Public/11.0.0/ucd/extracted/DerivedGeneralCategory.txt
  //
  // Unix magic used:
  //
  //   grep "; $CATEGORY" DerivedGeneralCategory.txt |   # Filter characters
  //     cut -f1 -d " " |                                # Extract code points
  //     grep -v '[0-9a-fA-F]\{5\}' |                    # Exclude non-BMP characters
  //     sed -e 's/\.\./-/' |                            # Adjust formatting
  //     sed -e 's/\([0-9a-fA-F]\{4\}\)/\\u\1/g' |       # Adjust formatting
  //     tr -d '\n'                                      # Join lines
  //
  // ECMA-262 allows using Unicode 3.0 or later, version 8.0.0 was the latest one
  // at the time of writing.
  //
  // Non-BMP characters are completely ignored to avoid surrogate pair handling
  // (detecting surrogate pairs isn't possible with a simple character class and
  // other methods would degrade performance). I don't consider it a big deal as
  // even parsers in JavaScript engines of common browsers seem to ignore them.

  // Letter, Lowercase
  Ll <- [\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]

  // Letter, Modifier
  Lm <- [\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]

  // Letter, Other
  Lo <- [\u00AA\u00BA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u09FC\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD-\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]

  // Letter, Titlecase
  Lt <- [\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]

  // Letter, Uppercase
  Lu <- [\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uFF21-\uFF3A]

  // Mark, Spacing Combining
  Mc <- [\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u1CF7\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]

  // Mark, Nonspacing
  Mn <- [\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u09FE\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D00-\u0D01\u0D3B-\u0D3C\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885-\u1886\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]

  // Number, Decimal Digit
  Nd <- [\u0030-\u0039\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]

  // Number, Letter
  Nl <- [\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]

  // Punctuation, Connector
  Pc <- [\u005F\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]

  // Separator, Space
  Zs <- [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

  // Tokens

  BreakToken      <- "break"      !IdentifierPart
  CaseToken       <- "case"       !IdentifierPart
  CatchToken      <- "catch"      !IdentifierPart
  ClassToken      <- "class"      !IdentifierPart
  ConstToken      <- "const"      !IdentifierPart
  ContinueToken   <- "continue"   !IdentifierPart
  DebuggerToken   <- "debugger"   !IdentifierPart
  DefaultToken    <- "default"    !IdentifierPart
  DeleteToken     <- "delete"     !IdentifierPart
  DoToken         <- "do"         !IdentifierPart
  ElseToken       <- "else"       !IdentifierPart
  EnumToken       <- "enum"       !IdentifierPart
  ExportToken     <- "export"     !IdentifierPart
  ExtendsToken    <- "extends"    !IdentifierPart
  FalseToken      <- "false"      !IdentifierPart
  FinallyToken    <- "finally"    !IdentifierPart
  ForToken        <- "for"        !IdentifierPart
  FunctionToken   <- "function"   !IdentifierPart
  GetToken        <- "get"        !IdentifierPart
  IfToken         <- "if"         !IdentifierPart
  ImportToken     <- "import"     !IdentifierPart
  InstanceofToken <- "instanceof" !IdentifierPart
  InToken         <- "in"         !IdentifierPart
  NewToken        <- "new"        !IdentifierPart
  NullToken       <- "null"       !IdentifierPart
  ReturnToken     <- "return"     !IdentifierPart
  SetToken        <- "set"        !IdentifierPart
  SuperToken      <- "super"      !IdentifierPart
  SwitchToken     <- "switch"     !IdentifierPart
  ThisToken       <- "this"       !IdentifierPart
  ThrowToken      <- "throw"      !IdentifierPart
  TrueToken       <- "true"       !IdentifierPart
  TryToken        <- "try"        !IdentifierPart
  TypeofToken     <- "typeof"     !IdentifierPart
  VarToken        <- "var"        !IdentifierPart
  VoidToken       <- "void"       !IdentifierPart
  WhileToken      <- "while"      !IdentifierPart
  WithToken       <- "with"       !IdentifierPart

  // Skipped

  __
    <- (WhiteSpace / LineTerminatorSequence / Comment)*

  _
    <- (WhiteSpace / MultiLineCommentNoLineTerminator)*

  // Automatic Semicolon Insertion

  EOS
    <- __ ";"
    / _ SingleLineComment? LineTerminatorSequence
    / _ &"}"
    / __ EOF

  EOF
    <- !.

  // ----- A.2 Number Conversions -----

  // Irrelevant.

  // ----- A.3 Expressions -----

  PrimaryExpression
    <- ThisToken { return { type: "ThisExpression" }; }
    / Identifier
    / Literal
    / ArrayLiteral
    / ObjectLiteral
    / "(" __ expression:Expression __ ")" { return expression; }

  ArrayLiteral
    <- "[" __ elision:(Elision __)? "]" {
        return {
          type: "ArrayExpression",
          elements: optionalList(extractOptional(elision, 0))
        };
      }
    / "[" __ elements:ElementList __ "]" {
        return {
          type: "ArrayExpression",
          elements: elements
        };
      }
    / "[" __ elements:ElementList __ "," __ elision:(Elision __)? "]" {
        return {
          type: "ArrayExpression",
          elements: elements.concat(optionalList(extractOptional(elision, 0)))
        };
      }

  ElementList
    <- head:(
        elision:(Elision __)? element:AssignmentExpression {
          return optionalList(extractOptional(elision, 0)).concat(element);
        }
      )
      tail:(
        __ "," __ elision:(Elision __)? element:AssignmentExpression {
          return optionalList(extractOptional(elision, 0)).concat(element);
        }
      )*
      { return Array.prototype.concat.apply(head, tail); }

  Elision
    <- "," commas:(__ ",")* { return filledArray(commas.length + 1, null); }

  ObjectLiteral
    <- "{" __ "}" { return { type: "ObjectExpression", properties: [] }; }
    / "{" __ properties:PropertyNameAndValueList __ "}" {
        return { type: "ObjectExpression", properties: properties };
      }
    / "{" __ properties:PropertyNameAndValueList __ "," __ "}" {
        return { type: "ObjectExpression", properties: properties };
      }
  PropertyNameAndValueList
    <- head:PropertyAssignment tail:(__ "," __ PropertyAssignment)* {
        return buildList(head, tail, 3);
      }

  PropertyAssignment
    <- key:PropertyName __ ":" __ value:AssignmentExpression {
        return { type: "Property", key: key, value: value, kind: "init" };
      }
    / GetToken __ key:PropertyName __
      "(" __ ")" __
      "{" __ body:FunctionBody __ "}"
      {
        return {
          type: "Property",
          key: key,
          value: {
            type: "FunctionExpression",
            id: null,
            params: [],
            body: body
          },
          kind: "get"
        };
      }
    / SetToken __ key:PropertyName __
      "(" __ params:PropertySetParameterList __ ")" __
      "{" __ body:FunctionBody __ "}"
      {
        return {
          type: "Property",
          key: key,
          value: {
            type: "FunctionExpression",
            id: null,
            params: params,
            body: body
          },
          kind: "set"
        };
      }

  PropertyName
    <- IdentifierName
    / StringLiteral
    / NumericLiteral

  PropertySetParameterList
    <- id:Identifier { return [id]; }

  MemberExpression
    <- head:(
          PrimaryExpression
        / FunctionExpression
        / NewToken __ callee:MemberExpression __ args:Arguments {
            return { type: "NewExpression", callee: callee, arguments: args };
          }
      )
      tail:(
          __ "[" __ property:Expression __ "]" {
            return { property: property, computed: true };
          }
        / __ "." __ property:IdentifierName {
            return { property: property, computed: false };
          }
      )*
      {
        return tail.reduce(function(result, element) {
          return {
            type: "MemberExpression",
            object: result,
            property: element.property,
            computed: element.computed
          };
        }, head);
      }

  NewExpression
    <- MemberExpression
    / NewToken __ callee:NewExpression {
        return { type: "NewExpression", callee: callee, arguments: [] };
      }

  CallExpression
    <- head:(
        callee:MemberExpression __ args:Arguments {
          return { type: "CallExpression", callee: callee, arguments: args };
        }
      )
      tail:(
          __ args:Arguments {
            return { type: "CallExpression", arguments: args };
          }
        / __ "[" __ property:Expression __ "]" {
            return {
              type: "MemberExpression",
              property: property,
              computed: true
            };
          }
        / __ "." __ property:IdentifierName {
            return {
              type: "MemberExpression",
              property: property,
              computed: false
            };
          }
      )*
      {
        return tail.reduce(function(result, element) {
          element[TYPES_TO_PROPERTY_NAMES[element.type]] <- result;

          return element;
        }, head);
      }

  Arguments
    <- "(" __ args:(ArgumentList __)? ")" {
        return optionalList(extractOptional(args, 0));
      }

  ArgumentList
    <- head:AssignmentExpression tail:(__ "," __ AssignmentExpression)* {
        return buildList(head, tail, 3);
      }

  LeftHandSideExpression
    <- CallExpression
    / NewExpression

  PostfixExpression
    <- argument:LeftHandSideExpression _ operator:PostfixOperator {
        return {
          type: "UpdateExpression",
          operator: operator,
          argument: argument,
          prefix: false
        };
      }
    / LeftHandSideExpression

  PostfixOperator
    <- "++"
    / "--"

  UnaryExpression
    <- PostfixExpression
    / operator:UnaryOperator __ argument:UnaryExpression {
        var type <- (operator === "++" || operator === "--")
          ? "UpdateExpression"
          : "UnaryExpression";

        return {
          type: type,
          operator: operator,
          argument: argument,
          prefix: true
        };
      }

  UnaryOperator
    <- $DeleteToken
    / $VoidToken
    / $TypeofToken
    / "++"
    / "--"
    / $("+" !"=")
    / $("-" !"=")
    / "~"
    / "!"

  MultiplicativeExpression
    <- head:UnaryExpression
      tail:(__ MultiplicativeOperator __ UnaryExpression)*
      { return buildBinaryExpression(head, tail); }

  MultiplicativeOperator
    <- $("*" !"=")
    / $("/" !"=")
    / $("%" !"=")

  AdditiveExpression
    <- head:MultiplicativeExpression
      tail:(__ AdditiveOperator __ MultiplicativeExpression)*
      { return buildBinaryExpression(head, tail); }

  AdditiveOperator
    <- $("+" ![+=])
    / $("-" ![-=])

  ShiftExpression
    <- head:AdditiveExpression
      tail:(__ ShiftOperator __ AdditiveExpression)*
      { return buildBinaryExpression(head, tail); }

  ShiftOperator
    <- $("<<"  !"=")
    / $(">>>" !"=")
    / $(">>"  !"=")

  RelationalExpression
    <- head:ShiftExpression
      tail:(__ RelationalOperator __ ShiftExpression)*
      { return buildBinaryExpression(head, tail); }

  RelationalOperator
    <- "<="
    / ">="
    / $("<" !"<")
    / $(">" !">")
    / $InstanceofToken
    / $InToken

  RelationalExpressionNoIn
    <- head:ShiftExpression
      tail:(__ RelationalOperatorNoIn __ ShiftExpression)*
      { return buildBinaryExpression(head, tail); }

  RelationalOperatorNoIn
    <- "<="
    / ">="
    / $("<" !"<")
    / $(">" !">")
    / $InstanceofToken

  EqualityExpression
    <- head:RelationalExpression
      tail:(__ EqualityOperator __ RelationalExpression)*
      { return buildBinaryExpression(head, tail); }

  EqualityExpressionNoIn
    <- head:RelationalExpressionNoIn
      tail:(__ EqualityOperator __ RelationalExpressionNoIn)*
      { return buildBinaryExpression(head, tail); }

  EqualityOperator
    <- "==="
    / "!=="
    / "=="
    / "!="

  BitwiseANDExpression
    <- head:EqualityExpression
      tail:(__ BitwiseANDOperator __ EqualityExpression)*
      { return buildBinaryExpression(head, tail); }

  BitwiseANDExpressionNoIn
    <- head:EqualityExpressionNoIn
      tail:(__ BitwiseANDOperator __ EqualityExpressionNoIn)*
      { return buildBinaryExpression(head, tail); }

  BitwiseANDOperator
    <- $("&" ![&=])

  BitwiseXORExpression
    <- head:BitwiseANDExpression
      tail:(__ BitwiseXOROperator __ BitwiseANDExpression)*
      { return buildBinaryExpression(head, tail); }

  BitwiseXORExpressionNoIn
    <- head:BitwiseANDExpressionNoIn
      tail:(__ BitwiseXOROperator __ BitwiseANDExpressionNoIn)*
      { return buildBinaryExpression(head, tail); }

  BitwiseXOROperator
    <- $("^" !"=")

  BitwiseORExpression
    <- head:BitwiseXORExpression
      tail:(__ BitwiseOROperator __ BitwiseXORExpression)*
      { return buildBinaryExpression(head, tail); }

  BitwiseORExpressionNoIn
    <- head:BitwiseXORExpressionNoIn
      tail:(__ BitwiseOROperator __ BitwiseXORExpressionNoIn)*
      { return buildBinaryExpression(head, tail); }

  BitwiseOROperator
    <- $("|" ![|=])

  LogicalANDExpression
    <- head:BitwiseORExpression
      tail:(__ LogicalANDOperator __ BitwiseORExpression)*
      { return buildLogicalExpression(head, tail); }

  LogicalANDExpressionNoIn
    <- head:BitwiseORExpressionNoIn
      tail:(__ LogicalANDOperator __ BitwiseORExpressionNoIn)*
      { return buildLogicalExpression(head, tail); }

  LogicalANDOperator
    <- "&&"

  LogicalORExpression
    <- head:LogicalANDExpression
      tail:(__ LogicalOROperator __ LogicalANDExpression)*
      { return buildLogicalExpression(head, tail); }

  LogicalORExpressionNoIn
    <- head:LogicalANDExpressionNoIn
      tail:(__ LogicalOROperator __ LogicalANDExpressionNoIn)*
      { return buildLogicalExpression(head, tail); }

  LogicalOROperator
    <- "||"

  ConditionalExpression
    <- test:LogicalORExpression __
      "?" __ consequent:AssignmentExpression __
      ":" __ alternate:AssignmentExpression
      {
        return {
          type: "ConditionalExpression",
          test: test,
          consequent: consequent,
          alternate: alternate
        };
      }
    / LogicalORExpression

  ConditionalExpressionNoIn
    <- test:LogicalORExpressionNoIn __
      "?" __ consequent:AssignmentExpression __
      ":" __ alternate:AssignmentExpressionNoIn
      {
        return {
          type: "ConditionalExpression",
          test: test,
          consequent: consequent,
          alternate: alternate
        };
      }
    / LogicalORExpressionNoIn

  AssignmentExpression
    <- left:LeftHandSideExpression __
      "=" !"=" __
      right:AssignmentExpression
      {
        return {
          type: "AssignmentExpression",
          operator: "=",
          left: left,
          right: right
        };
      }
    / left:LeftHandSideExpression __
      operator:AssignmentOperator __
      right:AssignmentExpression
      {
        return {
          type: "AssignmentExpression",
          operator: operator,
          left: left,
          right: right
        };
      }
    / ConditionalExpression

  AssignmentExpressionNoIn
    <- left:LeftHandSideExpression __
      "=" !"=" __
      right:AssignmentExpressionNoIn
      {
        return {
          type: "AssignmentExpression",
          operator: "=",
          left: left,
          right: right
        };
      }
    / left:LeftHandSideExpression __
      operator:AssignmentOperator __
      right:AssignmentExpressionNoIn
      {
        return {
          type: "AssignmentExpression",
          operator: operator,
          left: left,
          right: right
        };
      }
    / ConditionalExpressionNoIn

  AssignmentOperator
    <- "*="
    / "/="
    / "%="
    / "+="
    / "-="
    / "<<="
    / ">>="
    / ">>>="
    / "&="
    / "^="
    / "|="

  Expression
    <- head:AssignmentExpression tail:(__ "," __ AssignmentExpression)* {
        return tail.length > 0
          ? { type: "SequenceExpression", expressions: buildList(head, tail, 3) }
          : head;
      }

  ExpressionNoIn
    <- head:AssignmentExpressionNoIn tail:(__ "," __ AssignmentExpressionNoIn)* {
        return tail.length > 0
          ? { type: "SequenceExpression", expressions: buildList(head, tail, 3) }
          : head;
      }

  // ----- A.4 Statements -----

  Statement
    <- Block
    / VariableStatement
    / EmptyStatement
    / ExpressionStatement
    / IfStatement
    / IterationStatement
    / ContinueStatement
    / BreakStatement
    / ReturnStatement
    / WithStatement
    / LabelledStatement
    / SwitchStatement
    / ThrowStatement
    / TryStatement
    / DebuggerStatement

  Block
    <- "{" __ body:(StatementList __)? "}" {
        return {
          type: "BlockStatement",
          body: optionalList(extractOptional(body, 0))
        };
      }

  StatementList
    <- head:Statement tail:(__ Statement)* { return buildList(head, tail, 1); }

  VariableStatement
    <- VarToken __ declarations:VariableDeclarationList EOS {
        return {
          type: "VariableDeclaration",
          declarations: declarations,
          kind: "var"
        };
      }

  VariableDeclarationList
    <- head:VariableDeclaration tail:(__ "," __ VariableDeclaration)* {
        return buildList(head, tail, 3);
      }

  VariableDeclarationListNoIn
    <- head:VariableDeclarationNoIn tail:(__ "," __ VariableDeclarationNoIn)* {
        return buildList(head, tail, 3);
      }

  VariableDeclaration
    <- id:Identifier init:(__ Initialiser)? {
        return {
          type: "VariableDeclarator",
          id: id,
          init: extractOptional(init, 1)
        };
      }

  VariableDeclarationNoIn
    <- id:Identifier init:(__ InitialiserNoIn)? {
        return {
          type: "VariableDeclarator",
          id: id,
          init: extractOptional(init, 1)
        };
      }

  Initialiser
    <- "=" !"=" __ expression:AssignmentExpression { return expression; }

  InitialiserNoIn
    <- "=" !"=" __ expression:AssignmentExpressionNoIn { return expression; }

  EmptyStatement
    <- ";" { return { type: "EmptyStatement" }; }

  ExpressionStatement
    <- !("{" / FunctionToken) expression:Expression EOS {
        return {
          type: "ExpressionStatement",
          expression: expression
        };
      }

  IfStatement
    <- IfToken __ "(" __ test:Expression __ ")" __
      consequent:Statement __
      ElseToken __
      alternate:Statement
      {
        return {
          type: "IfStatement",
          test: test,
          consequent: consequent,
          alternate: alternate
        };
      }
    / IfToken __ "(" __ test:Expression __ ")" __
      consequent:Statement {
        return {
          type: "IfStatement",
          test: test,
          consequent: consequent,
          alternate: null
        };
      }

  IterationStatement
    <- DoToken __
      body:Statement __
      WhileToken __ "(" __ test:Expression __ ")" EOS
      { return { type: "DoWhileStatement", body: body, test: test }; }
    / WhileToken __ "(" __ test:Expression __ ")" __
      body:Statement
      { return { type: "WhileStatement", test: test, body: body }; }
    / ForToken __
      "(" __
      init:(ExpressionNoIn __)? ";" __
      test:(Expression __)? ";" __
      update:(Expression __)?
      ")" __
      body:Statement
      {
        return {
          type: "ForStatement",
          init: extractOptional(init, 0),
          test: extractOptional(test, 0),
          update: extractOptional(update, 0),
          body: body
        };
      }
    / ForToken __
      "(" __
      VarToken __ declarations:VariableDeclarationListNoIn __ ";" __
      test:(Expression __)? ";" __
      update:(Expression __)?
      ")" __
      body:Statement
      {
        return {
          type: "ForStatement",
          init: {
            type: "VariableDeclaration",
            declarations: declarations,
            kind: "var"
          },
          test: extractOptional(test, 0),
          update: extractOptional(update, 0),
          body: body
        };
      }
    / ForToken __
      "(" __
      left:LeftHandSideExpression __
      InToken __
      right:Expression __
      ")" __
      body:Statement
      {
        return {
          type: "ForInStatement",
          left: left,
          right: right,
          body: body
        };
      }
    / ForToken __
      "(" __
      VarToken __ declarations:VariableDeclarationListNoIn __
      InToken __
      right:Expression __
      ")" __
      body:Statement
      {
        return {
          type: "ForInStatement",
          left: {
            type: "VariableDeclaration",
            declarations: declarations,
            kind: "var"
          },
          right: right,
          body: body
        };
      }

  ContinueStatement
    <- ContinueToken EOS {
        return { type: "ContinueStatement", label: null };
      }
    / ContinueToken _ label:Identifier EOS {
        return { type: "ContinueStatement", label: label };
      }

  BreakStatement
    <- BreakToken EOS {
        return { type: "BreakStatement", label: null };
      }
    / BreakToken _ label:Identifier EOS {
        return { type: "BreakStatement", label: label };
      }

  ReturnStatement
    <- ReturnToken EOS {
        return { type: "ReturnStatement", argument: null };
      }
    / ReturnToken _ argument:Expression EOS {
        return { type: "ReturnStatement", argument: argument };
      }

  WithStatement
    <- WithToken __ "(" __ object:Expression __ ")" __
      body:Statement
      { return { type: "WithStatement", object: object, body: body }; }

  SwitchStatement
    <- SwitchToken __ "(" __ discriminant:Expression __ ")" __
      cases:CaseBlock
      {
        return {
          type: "SwitchStatement",
          discriminant: discriminant,
          cases: cases
        };
      }

  CaseBlock
    <- "{" __ clauses:(CaseClauses __)? "}" {
        return optionalList(extractOptional(clauses, 0));
      }
    / "{" __
      before:(CaseClauses __)?
      default_:DefaultClause __
      after:(CaseClauses __)? "}"
      {
        return optionalList(extractOptional(before, 0))
          .concat(default_)
          .concat(optionalList(extractOptional(after, 0)));
      }

  CaseClauses
    <- head:CaseClause tail:(__ CaseClause)* { return buildList(head, tail, 1); }

  CaseClause
    <- CaseToken __ test:Expression __ ":" consequent:(__ StatementList)? {
        return {
          type: "SwitchCase",
          test: test,
          consequent: optionalList(extractOptional(consequent, 1))
        };
      }

  DefaultClause
    <- DefaultToken __ ":" consequent:(__ StatementList)? {
        return {
          type: "SwitchCase",
          test: null,
          consequent: optionalList(extractOptional(consequent, 1))
        };
      }

  LabelledStatement
    <- label:Identifier __ ":" __ body:Statement {
        return { type: "LabeledStatement", label: label, body: body };
      }

  ThrowStatement
    <- ThrowToken _ argument:Expression EOS {
        return { type: "ThrowStatement", argument: argument };
      }

  TryStatement
    <- TryToken __ block:Block __ handler:Catch __ finalizer:Finally {
        return {
          type: "TryStatement",
          block: block,
          handler: handler,
          finalizer: finalizer
        };
      }
    / TryToken __ block:Block __ handler:Catch {
        return {
          type: "TryStatement",
          block: block,
          handler: handler,
          finalizer: null
        };
      }
    / TryToken __ block:Block __ finalizer:Finally {
        return {
          type: "TryStatement",
          block: block,
          handler: null,
          finalizer: finalizer
        };
      }

  Catch
    <- CatchToken __ "(" __ param:Identifier __ ")" __ body:Block {
        return {
          type: "CatchClause",
          param: param,
          body: body
        };
      }

  Finally
    <- FinallyToken __ block:Block { return block; }

  DebuggerStatement
    <- DebuggerToken EOS { return { type: "DebuggerStatement" }; }

  // ----- A.5 Functions and Programs -----

  FunctionDeclaration
    <- FunctionToken __ id:Identifier __
      "(" __ params:(FormalParameterList __)? ")" __
      "{" __ body:FunctionBody __ "}"
      {
        return {
          type: "FunctionDeclaration",
          id: id,
          params: optionalList(extractOptional(params, 0)),
          body: body
        };
      }

  FunctionExpression
    <- FunctionToken __ id:(Identifier __)?
      "(" __ params:(FormalParameterList __)? ")" __
      "{" __ body:FunctionBody __ "}"
      {
        return {
          type: "FunctionExpression",
          id: extractOptional(id, 0),
          params: optionalList(extractOptional(params, 0)),
          body: body
        };
      }

  FormalParameterList
    <- head:Identifier tail:(__ "," __ Identifier)* {
        return buildList(head, tail, 3);
      }

  FunctionBody
    <- body:SourceElements? {
        return {
          type: "BlockStatement",
          body: optionalList(body)
        };
      }

  Program
    <- body:SourceElements? {
        return {
          type: "Program",
          body: optionalList(body)
        };
      }

  SourceElements
    <- head:SourceElement tail:(__ SourceElement)* {
        return buildList(head, tail, 1);
      }

  SourceElement
    <- Statement
    / FunctionDeclaration

  // ----- A.6 Universal Resource Identifier Character Classes -----

  // Irrelevant.

  // ----- A.7 Regular Expressions -----

  // Irrelevant.

  // ----- A.8 JSON -----

  // Irrelevant.



  unicode_upper <- "\u{41}".."\u{5A}" | "\u{C0}".."\u{D6}" | "\u{D8}".."\u{DE}" | "\u{100}" | "\u{102}" | "\u{104}" | "\u{106}" | "\u{108}" | "\u{10A}" | "\u{10C}" | "\u{10E}" | "\u{110}" | "\u{112}" | "\u{114}" | "\u{116}" | "\u{118}" | "\u{11A}" | "\u{11C}" | "\u{11E}" | "\u{120}" | "\u{122}" | "\u{124}" | "\u{126}" | "\u{128}" | "\u{12A}" | "\u{12C}" | "\u{12E}" | "\u{130}" | "\u{132}" | "\u{134}" | "\u{136}" | "\u{139}" | "\u{13B}" | "\u{13D}" | "\u{13F}" | "\u{141}" | "\u{143}" | "\u{145}" | "\u{147}" | "\u{14A}" | "\u{14C}" | "\u{14E}" | "\u{150}" | "\u{152}" | "\u{154}" | "\u{156}" | "\u{158}" | "\u{15A}" | "\u{15C}" | "\u{15E}" | "\u{160}" | "\u{162}" | "\u{164}" | "\u{166}" | "\u{168}" | "\u{16A}" | "\u{16C}" | "\u{16E}" | "\u{170}" | "\u{172}" | "\u{174}" | "\u{176}" | "\u{178}".."\u{179}" | "\u{17B}" | "\u{17D}" | "\u{181}".."\u{182}" | "\u{184}" | "\u{186}".."\u{187}" | "\u{189}".."\u{18B}" | "\u{18E}".."\u{191}" | "\u{193}".."\u{194}" | "\u{196}".."\u{198}" | "\u{19C}".."\u{19D}" | "\u{19F}".."\u{1A0}" | "\u{1A2}" | "\u{1A4}" | "\u{1A6}".."\u{1A7}" | "\u{1A9}" | "\u{1AC}" | "\u{1AE}".."\u{1AF}" | "\u{1B1}".."\u{1B3}" | "\u{1B5}" | "\u{1B7}".."\u{1B8}" | "\u{1BC}" | "\u{1C4}" | "\u{1C7}" | "\u{1CA}" | "\u{1CD}" | "\u{1CF}" | "\u{1D1}" | "\u{1D3}" | "\u{1D5}" | "\u{1D7}" | "\u{1D9}" | "\u{1DB}" | "\u{1DE}" | "\u{1E0}" | "\u{1E2}" | "\u{1E4}" | "\u{1E6}" | "\u{1E8}" | "\u{1EA}" | "\u{1EC}" | "\u{1EE}" | "\u{1F1}" | "\u{1F4}" | "\u{1F6}".."\u{1F8}" | "\u{1FA}" | "\u{1FC}" | "\u{1FE}" | "\u{200}" | "\u{202}" | "\u{204}" | "\u{206}" | "\u{208}" | "\u{20A}" | "\u{20C}" | "\u{20E}" | "\u{210}" | "\u{212}" | "\u{214}" | "\u{216}" | "\u{218}" | "\u{21A}" | "\u{21C}" | "\u{21E}" | "\u{220}" | "\u{222}" | "\u{224}" | "\u{226}" | "\u{228}" | "\u{22A}" | "\u{22C}" | "\u{22E}" | "\u{230}" | "\u{232}" | "\u{23A}".."\u{23B}" | "\u{23D}".."\u{23E}" | "\u{241}" | "\u{243}".."\u{246}" | "\u{248}" | "\u{24A}" | "\u{24C}" | "\u{24E}" | "\u{370}" | "\u{372}" | "\u{376}" | "\u{37F}" | "\u{386}" | "\u{388}".."\u{38A}" | "\u{38C}" | "\u{38E}".."\u{38F}" | "\u{391}".."\u{3A1}" | "\u{3A3}".."\u{3AB}" | "\u{3CF}" | "\u{3D2}".."\u{3D4}" | "\u{3D8}" | "\u{3DA}" | "\u{3DC}" | "\u{3DE}" | "\u{3E0}" | "\u{3E2}" | "\u{3E4}" | "\u{3E6}" | "\u{3E8}" | "\u{3EA}" | "\u{3EC}" | "\u{3EE}" | "\u{3F4}" | "\u{3F7}" | "\u{3F9}".."\u{3FA}" | "\u{3FD}".."\u{42F}" | "\u{460}" | "\u{462}" | "\u{464}" | "\u{466}" | "\u{468}" | "\u{46A}" | "\u{46C}" | "\u{46E}" | "\u{470}" | "\u{472}" | "\u{474}" | "\u{476}" | "\u{478}" | "\u{47A}" | "\u{47C}" | "\u{47E}" | "\u{480}" | "\u{48A}" | "\u{48C}" | "\u{48E}" | "\u{490}" | "\u{492}" | "\u{494}" | "\u{496}" | "\u{498}" | "\u{49A}" | "\u{49C}" | "\u{49E}" | "\u{4A0}" | "\u{4A2}" | "\u{4A4}" | "\u{4A6}" | "\u{4A8}" | "\u{4AA}" | "\u{4AC}" | "\u{4AE}" | "\u{4B0}" | "\u{4B2}" | "\u{4B4}" | "\u{4B6}" | "\u{4B8}" | "\u{4BA}" | "\u{4BC}" | "\u{4BE}" | "\u{4C0}".."\u{4C1}" | "\u{4C3}" | "\u{4C5}" | "\u{4C7}" | "\u{4C9}" | "\u{4CB}" | "\u{4CD}" | "\u{4D0}" | "\u{4D2}" | "\u{4D4}" | "\u{4D6}" | "\u{4D8}" | "\u{4DA}" | "\u{4DC}" | "\u{4DE}" | "\u{4E0}" | "\u{4E2}" | "\u{4E4}" | "\u{4E6}" | "\u{4E8}" | "\u{4EA}" | "\u{4EC}" | "\u{4EE}" | "\u{4F0}" | "\u{4F2}" | "\u{4F4}" | "\u{4F6}" | "\u{4F8}" | "\u{4FA}" | "\u{4FC}" | "\u{4FE}" | "\u{500}" | "\u{502}" | "\u{504}" | "\u{506}" | "\u{508}" | "\u{50A}" | "\u{50C}" | "\u{50E}" | "\u{510}" | "\u{512}" | "\u{514}" | "\u{516}" | "\u{518}" | "\u{51A}" | "\u{51C}" | "\u{51E}" | "\u{520}" | "\u{522}" | "\u{524}" | "\u{526}" | "\u{528}" | "\u{52A}" | "\u{52C}" | "\u{52E}" | "\u{531}".."\u{556}" | "\u{10A0}".."\u{10C5}" | "\u{10C7}" | "\u{10CD}" | "\u{13A0}".."\u{13F5}" | "\u{1C90}".."\u{1CBA}" | "\u{1CBD}".."\u{1CBF}" | "\u{1E00}" | "\u{1E02}" | "\u{1E04}" | "\u{1E06}" | "\u{1E08}" | "\u{1E0A}" | "\u{1E0C}" | "\u{1E0E}" | "\u{1E10}" | "\u{1E12}" | "\u{1E14}" | "\u{1E16}" | "\u{1E18}" | "\u{1E1A}" | "\u{1E1C}" | "\u{1E1E}" | "\u{1E20}" | "\u{1E22}" | "\u{1E24}" | "\u{1E26}" | "\u{1E28}" | "\u{1E2A}" | "\u{1E2C}" | "\u{1E2E}" | "\u{1E30}" | "\u{1E32}" | "\u{1E34}" | "\u{1E36}" | "\u{1E38}" | "\u{1E3A}" | "\u{1E3C}" | "\u{1E3E}" | "\u{1E40}" | "\u{1E42}" | "\u{1E44}" | "\u{1E46}" | "\u{1E48}" | "\u{1E4A}" | "\u{1E4C}" | "\u{1E4E}" | "\u{1E50}" | "\u{1E52}" | "\u{1E54}" | "\u{1E56}" | "\u{1E58}" | "\u{1E5A}" | "\u{1E5C}" | "\u{1E5E}" | "\u{1E60}" | "\u{1E62}" | "\u{1E64}" | "\u{1E66}" | "\u{1E68}" | "\u{1E6A}" | "\u{1E6C}" | "\u{1E6E}" | "\u{1E70}" | "\u{1E72}" | "\u{1E74}" | "\u{1E76}" | "\u{1E78}" | "\u{1E7A}" | "\u{1E7C}" | "\u{1E7E}" | "\u{1E80}" | "\u{1E82}" | "\u{1E84}" | "\u{1E86}" | "\u{1E88}" | "\u{1E8A}" | "\u{1E8C}" | "\u{1E8E}" | "\u{1E90}" | "\u{1E92}" | "\u{1E94}" | "\u{1E9E}" | "\u{1EA0}" | "\u{1EA2}" | "\u{1EA4}" | "\u{1EA6}" | "\u{1EA8}" | "\u{1EAA}" | "\u{1EAC}" | "\u{1EAE}" | "\u{1EB0}" | "\u{1EB2}" | "\u{1EB4}" | "\u{1EB6}" | "\u{1EB8}" | "\u{1EBA}" | "\u{1EBC}" | "\u{1EBE}" | "\u{1EC0}" | "\u{1EC2}" | "\u{1EC4}" | "\u{1EC6}" | "\u{1EC8}" | "\u{1ECA}" | "\u{1ECC}" | "\u{1ECE}" | "\u{1ED0}" | "\u{1ED2}" | "\u{1ED4}" | "\u{1ED6}" | "\u{1ED8}" | "\u{1EDA}" | "\u{1EDC}" | "\u{1EDE}" | "\u{1EE0}" | "\u{1EE2}" | "\u{1EE4}" | "\u{1EE6}" | "\u{1EE8}" | "\u{1EEA}" | "\u{1EEC}" | "\u{1EEE}" | "\u{1EF0}" | "\u{1EF2}" | "\u{1EF4}" | "\u{1EF6}" | "\u{1EF8}" | "\u{1EFA}" | "\u{1EFC}" | "\u{1EFE}" | "\u{1F08}".."\u{1F0F}" | "\u{1F18}".."\u{1F1D}" | "\u{1F28}".."\u{1F2F}" | "\u{1F38}".."\u{1F3F}" | "\u{1F48}".."\u{1F4D}" | "\u{1F59}" | "\u{1F5B}" | "\u{1F5D}" | "\u{1F5F}" | "\u{1F68}".."\u{1F6F}" | "\u{1FB8}".."\u{1FBB}" | "\u{1FC8}".."\u{1FCB}" | "\u{1FD8}".."\u{1FDB}" | "\u{1FE8}".."\u{1FEC}" | "\u{1FF8}".."\u{1FFB}" | "\u{2102}" | "\u{2107}" | "\u{210B}".."\u{210D}" | "\u{2110}".."\u{2112}" | "\u{2115}" | "\u{2119}".."\u{211D}" | "\u{2124}" | "\u{2126}" | "\u{2128}" | "\u{212A}".."\u{212D}" | "\u{2130}".."\u{2133}" | "\u{213E}".."\u{213F}" | "\u{2145}" | "\u{2183}" | "\u{2C00}".."\u{2C2E}" | "\u{2C60}" | "\u{2C62}".."\u{2C64}" | "\u{2C67}" | "\u{2C69}" | "\u{2C6B}" | "\u{2C6D}".."\u{2C70}" | "\u{2C72}" | "\u{2C75}" | "\u{2C7E}".."\u{2C80}" | "\u{2C82}" | "\u{2C84}" | "\u{2C86}" | "\u{2C88}" | "\u{2C8A}" | "\u{2C8C}" | "\u{2C8E}" | "\u{2C90}" | "\u{2C92}" | "\u{2C94}" | "\u{2C96}" | "\u{2C98}" | "\u{2C9A}" | "\u{2C9C}" | "\u{2C9E}" | "\u{2CA0}" | "\u{2CA2}" | "\u{2CA4}" | "\u{2CA6}" | "\u{2CA8}" | "\u{2CAA}" | "\u{2CAC}" | "\u{2CAE}" | "\u{2CB0}" | "\u{2CB2}" | "\u{2CB4}" | "\u{2CB6}" | "\u{2CB8}" | "\u{2CBA}" | "\u{2CBC}" | "\u{2CBE}" | "\u{2CC0}" | "\u{2CC2}" | "\u{2CC4}" | "\u{2CC6}" | "\u{2CC8}" | "\u{2CCA}" | "\u{2CCC}" | "\u{2CCE}" | "\u{2CD0}" | "\u{2CD2}" | "\u{2CD4}" | "\u{2CD6}" | "\u{2CD8}" | "\u{2CDA}" | "\u{2CDC}" | "\u{2CDE}" | "\u{2CE0}" | "\u{2CE2}" | "\u{2CEB}" | "\u{2CED}" | "\u{2CF2}" | "\u{A640}" | "\u{A642}" | "\u{A644}" | "\u{A646}" | "\u{A648}" | "\u{A64A}" | "\u{A64C}" | "\u{A64E}" | "\u{A650}" | "\u{A652}" | "\u{A654}" | "\u{A656}" | "\u{A658}" | "\u{A65A}" | "\u{A65C}" | "\u{A65E}" | "\u{A660}" | "\u{A662}" | "\u{A664}" | "\u{A666}" | "\u{A668}" | "\u{A66A}" | "\u{A66C}" | "\u{A680}" | "\u{A682}" | "\u{A684}" | "\u{A686}" | "\u{A688}" | "\u{A68A}" | "\u{A68C}" | "\u{A68E}" | "\u{A690}" | "\u{A692}" | "\u{A694}" | "\u{A696}" | "\u{A698}" | "\u{A69A}" | "\u{A722}" | "\u{A724}" | "\u{A726}" | "\u{A728}" | "\u{A72A}" | "\u{A72C}" | "\u{A72E}" | "\u{A732}" | "\u{A734}" | "\u{A736}" | "\u{A738}" | "\u{A73A}" | "\u{A73C}" | "\u{A73E}" | "\u{A740}" | "\u{A742}" | "\u{A744}" | "\u{A746}" | "\u{A748}" | "\u{A74A}" | "\u{A74C}" | "\u{A74E}" | "\u{A750}" | "\u{A752}" | "\u{A754}" | "\u{A756}" | "\u{A758}" | "\u{A75A}" | "\u{A75C}" | "\u{A75E}" | "\u{A760}" | "\u{A762}" | "\u{A764}" | "\u{A766}" | "\u{A768}" | "\u{A76A}" | "\u{A76C}" | "\u{A76E}" | "\u{A779}" | "\u{A77B}" | "\u{A77D}".."\u{A77E}" | "\u{A780}" | "\u{A782}" | "\u{A784}" | "\u{A786}" | "\u{A78B}" | "\u{A78D}" | "\u{A790}" | "\u{A792}" | "\u{A796}" | "\u{A798}" | "\u{A79A}" | "\u{A79C}" | "\u{A79E}" | "\u{A7A0}" | "\u{A7A2}" | "\u{A7A4}" | "\u{A7A6}" | "\u{A7A8}" | "\u{A7AA}".."\u{A7AE}" | "\u{A7B0}".."\u{A7B4}" | "\u{A7B6}" | "\u{A7B8}" | "\u{FF21}".."\u{FF3A}" | "\u{10400}".."\u{10427}" | "\u{104B0}".."\u{104D3}" | "\u{10C80}".."\u{10CB2}" | "\u{118A0}".."\u{118BF}" | "\u{16E40}".."\u{16E5F}" | "\u{1D400}".."\u{1D419}" | "\u{1D434}".."\u{1D44D}" | "\u{1D468}".."\u{1D481}" | "\u{1D49C}" | "\u{1D49E}".."\u{1D49F}" | "\u{1D4A2}" | "\u{1D4A5}".."\u{1D4A6}" | "\u{1D4A9}".."\u{1D4AC}" | "\u{1D4AE}".."\u{1D4B5}" | "\u{1D4D0}".."\u{1D4E9}" | "\u{1D504}".."\u{1D505}" | "\u{1D507}".."\u{1D50A}" | "\u{1D50D}".."\u{1D514}" | "\u{1D516}".."\u{1D51C}" | "\u{1D538}".."\u{1D539}" | "\u{1D53B}".."\u{1D53E}" | "\u{1D540}".."\u{1D544}" | "\u{1D546}" | "\u{1D54A}".."\u{1D550}" | "\u{1D56C}".."\u{1D585}" | "\u{1D5A0}".."\u{1D5B9}" | "\u{1D5D4}".."\u{1D5ED}" | "\u{1D608}".."\u{1D621}" | "\u{1D63C}".."\u{1D655}" | "\u{1D670}".."\u{1D689}" | "\u{1D6A8}".."\u{1D6C0}" | "\u{1D6E2}".."\u{1D6FA}" | "\u{1D71C}".."\u{1D734}" | "\u{1D756}".."\u{1D76E}" | "\u{1D790}".."\u{1D7A8}" | "\u{1D7CA}" | "\u{1E900}".."\u{1E921}"
  unicode_lower <- "\u{61}".."\u{7A}" | "\u{B5}" | "\u{DF}".."\u{F6}" | "\u{F8}".."\u{FF}" | "\u{101}" | "\u{103}" | "\u{105}" | "\u{107}" | "\u{109}" | "\u{10B}" | "\u{10D}" | "\u{10F}" | "\u{111}" | "\u{113}" | "\u{115}" | "\u{117}" | "\u{119}" | "\u{11B}" | "\u{11D}" | "\u{11F}" | "\u{121}" | "\u{123}" | "\u{125}" | "\u{127}" | "\u{129}" | "\u{12B}" | "\u{12D}" | "\u{12F}" | "\u{131}" | "\u{133}" | "\u{135}" | "\u{137}".."\u{138}" | "\u{13A}" | "\u{13C}" | "\u{13E}" | "\u{140}" | "\u{142}" | "\u{144}" | "\u{146}" | "\u{148}".."\u{149}" | "\u{14B}" | "\u{14D}" | "\u{14F}" | "\u{151}" | "\u{153}" | "\u{155}" | "\u{157}" | "\u{159}" | "\u{15B}" | "\u{15D}" | "\u{15F}" | "\u{161}" | "\u{163}" | "\u{165}" | "\u{167}" | "\u{169}" | "\u{16B}" | "\u{16D}" | "\u{16F}" | "\u{171}" | "\u{173}" | "\u{175}" | "\u{177}" | "\u{17A}" | "\u{17C}" | "\u{17E}".."\u{180}" | "\u{183}" | "\u{185}" | "\u{188}" | "\u{18C}".."\u{18D}" | "\u{192}" | "\u{195}" | "\u{199}".."\u{19B}" | "\u{19E}" | "\u{1A1}" | "\u{1A3}" | "\u{1A5}" | "\u{1A8}" | "\u{1AA}".."\u{1AB}" | "\u{1AD}" | "\u{1B0}" | "\u{1B4}" | "\u{1B6}" | "\u{1B9}".."\u{1BA}" | "\u{1BD}".."\u{1BF}" | "\u{1C6}" | "\u{1C9}" | "\u{1CC}" | "\u{1CE}" | "\u{1D0}" | "\u{1D2}" | "\u{1D4}" | "\u{1D6}" | "\u{1D8}" | "\u{1DA}" | "\u{1DC}".."\u{1DD}" | "\u{1DF}" | "\u{1E1}" | "\u{1E3}" | "\u{1E5}" | "\u{1E7}" | "\u{1E9}" | "\u{1EB}" | "\u{1ED}" | "\u{1EF}".."\u{1F0}" | "\u{1F3}" | "\u{1F5}" | "\u{1F9}" | "\u{1FB}" | "\u{1FD}" | "\u{1FF}" | "\u{201}" | "\u{203}" | "\u{205}" | "\u{207}" | "\u{209}" | "\u{20B}" | "\u{20D}" | "\u{20F}" | "\u{211}" | "\u{213}" | "\u{215}" | "\u{217}" | "\u{219}" | "\u{21B}" | "\u{21D}" | "\u{21F}" | "\u{221}" | "\u{223}" | "\u{225}" | "\u{227}" | "\u{229}" | "\u{22B}" | "\u{22D}" | "\u{22F}" | "\u{231}" | "\u{233}".."\u{239}" | "\u{23C}" | "\u{23F}".."\u{240}" | "\u{242}" | "\u{247}" | "\u{249}" | "\u{24B}" | "\u{24D}" | "\u{24F}".."\u{293}" | "\u{295}".."\u{2AF}" | "\u{371}" | "\u{373}" | "\u{377}" | "\u{37B}".."\u{37D}" | "\u{390}" | "\u{3AC}".."\u{3CE}" | "\u{3D0}".."\u{3D1}" | "\u{3D5}".."\u{3D7}" | "\u{3D9}" | "\u{3DB}" | "\u{3DD}" | "\u{3DF}" | "\u{3E1}" | "\u{3E3}" | "\u{3E5}" | "\u{3E7}" | "\u{3E9}" | "\u{3EB}" | "\u{3ED}" | "\u{3EF}".."\u{3F3}" | "\u{3F5}" | "\u{3F8}" | "\u{3FB}".."\u{3FC}" | "\u{430}".."\u{45F}" | "\u{461}" | "\u{463}" | "\u{465}" | "\u{467}" | "\u{469}" | "\u{46B}" | "\u{46D}" | "\u{46F}" | "\u{471}" | "\u{473}" | "\u{475}" | "\u{477}" | "\u{479}" | "\u{47B}" | "\u{47D}" | "\u{47F}" | "\u{481}" | "\u{48B}" | "\u{48D}" | "\u{48F}" | "\u{491}" | "\u{493}" | "\u{495}" | "\u{497}" | "\u{499}" | "\u{49B}" | "\u{49D}" | "\u{49F}" | "\u{4A1}" | "\u{4A3}" | "\u{4A5}" | "\u{4A7}" | "\u{4A9}" | "\u{4AB}" | "\u{4AD}" | "\u{4AF}" | "\u{4B1}" | "\u{4B3}" | "\u{4B5}" | "\u{4B7}" | "\u{4B9}" | "\u{4BB}" | "\u{4BD}" | "\u{4BF}" | "\u{4C2}" | "\u{4C4}" | "\u{4C6}" | "\u{4C8}" | "\u{4CA}" | "\u{4CC}" | "\u{4CE}".."\u{4CF}" | "\u{4D1}" | "\u{4D3}" | "\u{4D5}" | "\u{4D7}" | "\u{4D9}" | "\u{4DB}" | "\u{4DD}" | "\u{4DF}" | "\u{4E1}" | "\u{4E3}" | "\u{4E5}" | "\u{4E7}" | "\u{4E9}" | "\u{4EB}" | "\u{4ED}" | "\u{4EF}" | "\u{4F1}" | "\u{4F3}" | "\u{4F5}" | "\u{4F7}" | "\u{4F9}" | "\u{4FB}" | "\u{4FD}" | "\u{4FF}" | "\u{501}" | "\u{503}" | "\u{505}" | "\u{507}" | "\u{509}" | "\u{50B}" | "\u{50D}" | "\u{50F}" | "\u{511}" | "\u{513}" | "\u{515}" | "\u{517}" | "\u{519}" | "\u{51B}" | "\u{51D}" | "\u{51F}" | "\u{521}" | "\u{523}" | "\u{525}" | "\u{527}" | "\u{529}" | "\u{52B}" | "\u{52D}" | "\u{52F}" | "\u{560}".."\u{588}" | "\u{10D0}".."\u{10FA}" | "\u{10FD}".."\u{10FF}" | "\u{13F8}".."\u{13FD}" | "\u{1C80}".."\u{1C88}" | "\u{1D00}".."\u{1D2B}" | "\u{1D6B}".."\u{1D77}" | "\u{1D79}".."\u{1D9A}" | "\u{1E01}" | "\u{1E03}" | "\u{1E05}" | "\u{1E07}" | "\u{1E09}" | "\u{1E0B}" | "\u{1E0D}" | "\u{1E0F}" | "\u{1E11}" | "\u{1E13}" | "\u{1E15}" | "\u{1E17}" | "\u{1E19}" | "\u{1E1B}" | "\u{1E1D}" | "\u{1E1F}" | "\u{1E21}" | "\u{1E23}" | "\u{1E25}" | "\u{1E27}" | "\u{1E29}" | "\u{1E2B}" | "\u{1E2D}" | "\u{1E2F}" | "\u{1E31}" | "\u{1E33}" | "\u{1E35}" | "\u{1E37}" | "\u{1E39}" | "\u{1E3B}" | "\u{1E3D}" | "\u{1E3F}" | "\u{1E41}" | "\u{1E43}" | "\u{1E45}" | "\u{1E47}" | "\u{1E49}" | "\u{1E4B}" | "\u{1E4D}" | "\u{1E4F}" | "\u{1E51}" | "\u{1E53}" | "\u{1E55}" | "\u{1E57}" | "\u{1E59}" | "\u{1E5B}" | "\u{1E5D}" | "\u{1E5F}" | "\u{1E61}" | "\u{1E63}" | "\u{1E65}" | "\u{1E67}" | "\u{1E69}" | "\u{1E6B}" | "\u{1E6D}" | "\u{1E6F}" | "\u{1E71}" | "\u{1E73}" | "\u{1E75}" | "\u{1E77}" | "\u{1E79}" | "\u{1E7B}" | "\u{1E7D}" | "\u{1E7F}" | "\u{1E81}" | "\u{1E83}" | "\u{1E85}" | "\u{1E87}" | "\u{1E89}" | "\u{1E8B}" | "\u{1E8D}" | "\u{1E8F}" | "\u{1E91}" | "\u{1E93}" | "\u{1E95}".."\u{1E9D}" | "\u{1E9F}" | "\u{1EA1}" | "\u{1EA3}" | "\u{1EA5}" | "\u{1EA7}" | "\u{1EA9}" | "\u{1EAB}" | "\u{1EAD}" | "\u{1EAF}" | "\u{1EB1}" | "\u{1EB3}" | "\u{1EB5}" | "\u{1EB7}" | "\u{1EB9}" | "\u{1EBB}" | "\u{1EBD}" | "\u{1EBF}" | "\u{1EC1}" | "\u{1EC3}" | "\u{1EC5}" | "\u{1EC7}" | "\u{1EC9}" | "\u{1ECB}" | "\u{1ECD}" | "\u{1ECF}" | "\u{1ED1}" | "\u{1ED3}" | "\u{1ED5}" | "\u{1ED7}" | "\u{1ED9}" | "\u{1EDB}" | "\u{1EDD}" | "\u{1EDF}" | "\u{1EE1}" | "\u{1EE3}" | "\u{1EE5}" | "\u{1EE7}" | "\u{1EE9}" | "\u{1EEB}" | "\u{1EED}" | "\u{1EEF}" | "\u{1EF1}" | "\u{1EF3}" | "\u{1EF5}" | "\u{1EF7}" | "\u{1EF9}" | "\u{1EFB}" | "\u{1EFD}" | "\u{1EFF}".."\u{1F07}" | "\u{1F10}".."\u{1F15}" | "\u{1F20}".."\u{1F27}" | "\u{1F30}".."\u{1F37}" | "\u{1F40}".."\u{1F45}" | "\u{1F50}".."\u{1F57}" | "\u{1F60}".."\u{1F67}" | "\u{1F70}".."\u{1F7D}" | "\u{1F80}".."\u{1F87}" | "\u{1F90}".."\u{1F97}" | "\u{1FA0}".."\u{1FA7}" | "\u{1FB0}".."\u{1FB4}" | "\u{1FB6}".."\u{1FB7}" | "\u{1FBE}" | "\u{1FC2}".."\u{1FC4}" | "\u{1FC6}".."\u{1FC7}" | "\u{1FD0}".."\u{1FD3}" | "\u{1FD6}".."\u{1FD7}" | "\u{1FE0}".."\u{1FE7}" | "\u{1FF2}".."\u{1FF4}" | "\u{1FF6}".."\u{1FF7}" | "\u{210A}" | "\u{210E}".."\u{210F}" | "\u{2113}" | "\u{212F}" | "\u{2134}" | "\u{2139}" | "\u{213C}".."\u{213D}" | "\u{2146}".."\u{2149}" | "\u{214E}" | "\u{2184}" | "\u{2C30}".."\u{2C5E}" | "\u{2C61}" | "\u{2C65}".."\u{2C66}" | "\u{2C68}" | "\u{2C6A}" | "\u{2C6C}" | "\u{2C71}" | "\u{2C73}".."\u{2C74}" | "\u{2C76}".."\u{2C7B}" | "\u{2C81}" | "\u{2C83}" | "\u{2C85}" | "\u{2C87}" | "\u{2C89}" | "\u{2C8B}" | "\u{2C8D}" | "\u{2C8F}" | "\u{2C91}" | "\u{2C93}" | "\u{2C95}" | "\u{2C97}" | "\u{2C99}" | "\u{2C9B}" | "\u{2C9D}" | "\u{2C9F}" | "\u{2CA1}" | "\u{2CA3}" | "\u{2CA5}" | "\u{2CA7}" | "\u{2CA9}" | "\u{2CAB}" | "\u{2CAD}" | "\u{2CAF}" | "\u{2CB1}" | "\u{2CB3}" | "\u{2CB5}" | "\u{2CB7}" | "\u{2CB9}" | "\u{2CBB}" | "\u{2CBD}" | "\u{2CBF}" | "\u{2CC1}" | "\u{2CC3}" | "\u{2CC5}" | "\u{2CC7}" | "\u{2CC9}" | "\u{2CCB}" | "\u{2CCD}" | "\u{2CCF}" | "\u{2CD1}" | "\u{2CD3}" | "\u{2CD5}" | "\u{2CD7}" | "\u{2CD9}" | "\u{2CDB}" | "\u{2CDD}" | "\u{2CDF}" | "\u{2CE1}" | "\u{2CE3}".."\u{2CE4}" | "\u{2CEC}" | "\u{2CEE}" | "\u{2CF3}" | "\u{2D00}".."\u{2D25}" | "\u{2D27}" | "\u{2D2D}" | "\u{A641}" | "\u{A643}" | "\u{A645}" | "\u{A647}" | "\u{A649}" | "\u{A64B}" | "\u{A64D}" | "\u{A64F}" | "\u{A651}" | "\u{A653}" | "\u{A655}" | "\u{A657}" | "\u{A659}" | "\u{A65B}" | "\u{A65D}" | "\u{A65F}" | "\u{A661}" | "\u{A663}" | "\u{A665}" | "\u{A667}" | "\u{A669}" | "\u{A66B}" | "\u{A66D}" | "\u{A681}" | "\u{A683}" | "\u{A685}" | "\u{A687}" | "\u{A689}" | "\u{A68B}" | "\u{A68D}" | "\u{A68F}" | "\u{A691}" | "\u{A693}" | "\u{A695}" | "\u{A697}" | "\u{A699}" | "\u{A69B}" | "\u{A723}" | "\u{A725}" | "\u{A727}" | "\u{A729}" | "\u{A72B}" | "\u{A72D}" | "\u{A72F}".."\u{A731}" | "\u{A733}" | "\u{A735}" | "\u{A737}" | "\u{A739}" | "\u{A73B}" | "\u{A73D}" | "\u{A73F}" | "\u{A741}" | "\u{A743}" | "\u{A745}" | "\u{A747}" | "\u{A749}" | "\u{A74B}" | "\u{A74D}" | "\u{A74F}" | "\u{A751}" | "\u{A753}" | "\u{A755}" | "\u{A757}" | "\u{A759}" | "\u{A75B}" | "\u{A75D}" | "\u{A75F}" | "\u{A761}" | "\u{A763}" | "\u{A765}" | "\u{A767}" | "\u{A769}" | "\u{A76B}" | "\u{A76D}" | "\u{A76F}" | "\u{A771}".."\u{A778}" | "\u{A77A}" | "\u{A77C}" | "\u{A77F}" | "\u{A781}" | "\u{A783}" | "\u{A785}" | "\u{A787}" | "\u{A78C}" | "\u{A78E}" | "\u{A791}" | "\u{A793}".."\u{A795}" | "\u{A797}" | "\u{A799}" | "\u{A79B}" | "\u{A79D}" | "\u{A79F}" | "\u{A7A1}" | "\u{A7A3}" | "\u{A7A5}" | "\u{A7A7}" | "\u{A7A9}" | "\u{A7AF}" | "\u{A7B5}" | "\u{A7B7}" | "\u{A7B9}" | "\u{A7FA}" | "\u{AB30}".."\u{AB5A}" | "\u{AB60}".."\u{AB65}" | "\u{AB70}".."\u{ABBF}" | "\u{FB00}".."\u{FB06}" | "\u{FB13}".."\u{FB17}" | "\u{FF41}".."\u{FF5A}" | "\u{10428}".."\u{1044F}" | "\u{104D8}".."\u{104FB}" | "\u{10CC0}".."\u{10CF2}" | "\u{118C0}".."\u{118DF}" | "\u{16E60}".."\u{16E7F}" | "\u{1D41A}".."\u{1D433}" | "\u{1D44E}".."\u{1D454}" | "\u{1D456}".."\u{1D467}" | "\u{1D482}".."\u{1D49B}" | "\u{1D4B6}".."\u{1D4B9}" | "\u{1D4BB}" | "\u{1D4BD}".."\u{1D4C3}" | "\u{1D4C5}".."\u{1D4CF}" | "\u{1D4EA}".."\u{1D503}" | "\u{1D51E}".."\u{1D537}" | "\u{1D552}".."\u{1D56B}" | "\u{1D586}".."\u{1D59F}" | "\u{1D5BA}".."\u{1D5D3}" | "\u{1D5EE}".."\u{1D607}" | "\u{1D622}".."\u{1D63B}" | "\u{1D656}".."\u{1D66F}" | "\u{1D68A}".."\u{1D6A5}" | "\u{1D6C2}".."\u{1D6DA}" | "\u{1D6DC}".."\u{1D6E1}" | "\u{1D6FC}".."\u{1D714}" | "\u{1D716}".."\u{1D71B}" | "\u{1D736}".."\u{1D74E}" | "\u{1D750}".."\u{1D755}" | "\u{1D770}".."\u{1D788}" | "\u{1D78A}".."\u{1D78F}" | "\u{1D7AA}".."\u{1D7C2}" | "\u{1D7C4}".."\u{1D7C9}" | "\u{1D7CB}" | "\u{1E922}".."\u{1E943}"
  unicode_titlecase <- "\u{1C5}" | "\u{1C8}" | "\u{1CB}" | "\u{1F2}" | "\u{1F88}".."\u{1F8F}" | "\u{1F98}".."\u{1F9F}" | "\u{1FA8}".."\u{1FAF}" | "\u{1FBC}" | "\u{1FCC}" | "\u{1FFC}"
  unicode_modifier <- "\u{2B0}".."\u{2C1}" | "\u{2C6}".."\u{2D1}" | "\u{2E0}".."\u{2E4}" | "\u{2EC}" | "\u{2EE}" | "\u{374}" | "\u{37A}" | "\u{559}" | "\u{640}" | "\u{6E5}".."\u{6E6}" | "\u{7F4}".."\u{7F5}" | "\u{7FA}" | "\u{81A}" | "\u{824}" | "\u{828}" | "\u{971}" | "\u{E46}" | "\u{EC6}" | "\u{10FC}" | "\u{17D7}" | "\u{1843}" | "\u{1AA7}" | "\u{1C78}".."\u{1C7D}" | "\u{1D2C}".."\u{1D6A}" | "\u{1D78}" | "\u{1D9B}".."\u{1DBF}" | "\u{2071}" | "\u{207F}" | "\u{2090}".."\u{209C}" | "\u{2C7C}".."\u{2C7D}" | "\u{2D6F}" | "\u{2E2F}" | "\u{3005}" | "\u{3031}".."\u{3035}" | "\u{303B}" | "\u{309D}".."\u{309E}" | "\u{30FC}".."\u{30FE}" | "\u{A015}" | "\u{A4F8}".."\u{A4FD}" | "\u{A60C}" | "\u{A67F}" | "\u{A69C}".."\u{A69D}" | "\u{A717}".."\u{A71F}" | "\u{A770}" | "\u{A788}" | "\u{A7F8}".."\u{A7F9}" | "\u{A9CF}" | "\u{A9E6}" | "\u{AA70}" | "\u{AADD}" | "\u{AAF3}".."\u{AAF4}" | "\u{AB5C}".."\u{AB5F}" | "\u{FF70}" | "\u{FF9E}".."\u{FF9F}" | "\u{16B40}".."\u{16B43}" | "\u{16F93}".."\u{16F9F}" | "\u{16FE0}".."\u{16FE1}"
  unicode_other_letter <- "\u{AA}" | "\u{BA}" | "\u{1BB}" | "\u{1C0}".."\u{1C3}" | "\u{294}" | "\u{5D0}".."\u{5EA}" | "\u{5EF}".."\u{5F2}" | "\u{620}".."\u{63F}" | "\u{641}".."\u{64A}" | "\u{66E}".."\u{66F}" | "\u{671}".."\u{6D3}" | "\u{6D5}" | "\u{6EE}".."\u{6EF}" | "\u{6FA}".."\u{6FC}" | "\u{6FF}" | "\u{710}" | "\u{712}".."\u{72F}" | "\u{74D}".."\u{7A5}" | "\u{7B1}" | "\u{7CA}".."\u{7EA}" | "\u{800}".."\u{815}" | "\u{840}".."\u{858}" | "\u{860}".."\u{86A}" | "\u{8A0}".."\u{8B4}" | "\u{8B6}".."\u{8BD}" | "\u{904}".."\u{939}" | "\u{93D}" | "\u{950}" | "\u{958}".."\u{961}" | "\u{972}".."\u{980}" | "\u{985}".."\u{98C}" | "\u{98F}".."\u{990}" | "\u{993}".."\u{9A8}" | "\u{9AA}".."\u{9B0}" | "\u{9B2}" | "\u{9B6}".."\u{9B9}" | "\u{9BD}" | "\u{9CE}" | "\u{9DC}".."\u{9DD}" | "\u{9DF}".."\u{9E1}" | "\u{9F0}".."\u{9F1}" | "\u{9FC}" | "\u{A05}".."\u{A0A}" | "\u{A0F}".."\u{A10}" | "\u{A13}".."\u{A28}" | "\u{A2A}".."\u{A30}" | "\u{A32}".."\u{A33}" | "\u{A35}".."\u{A36}" | "\u{A38}".."\u{A39}" | "\u{A59}".."\u{A5C}" | "\u{A5E}" | "\u{A72}".."\u{A74}" | "\u{A85}".."\u{A8D}" | "\u{A8F}".."\u{A91}" | "\u{A93}".."\u{AA8}" | "\u{AAA}".."\u{AB0}" | "\u{AB2}".."\u{AB3}" | "\u{AB5}".."\u{AB9}" | "\u{ABD}" | "\u{AD0}" | "\u{AE0}".."\u{AE1}" | "\u{AF9}" | "\u{B05}".."\u{B0C}" | "\u{B0F}".."\u{B10}" | "\u{B13}".."\u{B28}" | "\u{B2A}".."\u{B30}" | "\u{B32}".."\u{B33}" | "\u{B35}".."\u{B39}" | "\u{B3D}" | "\u{B5C}".."\u{B5D}" | "\u{B5F}".."\u{B61}" | "\u{B71}" | "\u{B83}" | "\u{B85}".."\u{B8A}" | "\u{B8E}".."\u{B90}" | "\u{B92}".."\u{B95}" | "\u{B99}".."\u{B9A}" | "\u{B9C}" | "\u{B9E}".."\u{B9F}" | "\u{BA3}".."\u{BA4}" | "\u{BA8}".."\u{BAA}" | "\u{BAE}".."\u{BB9}" | "\u{BD0}" | "\u{C05}".."\u{C0C}" | "\u{C0E}".."\u{C10}" | "\u{C12}".."\u{C28}" | "\u{C2A}".."\u{C39}" | "\u{C3D}" | "\u{C58}".."\u{C5A}" | "\u{C60}".."\u{C61}" | "\u{C80}" | "\u{C85}".."\u{C8C}" | "\u{C8E}".."\u{C90}" | "\u{C92}".."\u{CA8}" | "\u{CAA}".."\u{CB3}" | "\u{CB5}".."\u{CB9}" | "\u{CBD}" | "\u{CDE}" | "\u{CE0}".."\u{CE1}" | "\u{CF1}".."\u{CF2}" | "\u{D05}".."\u{D0C}" | "\u{D0E}".."\u{D10}" | "\u{D12}".."\u{D3A}" | "\u{D3D}" | "\u{D4E}" | "\u{D54}".."\u{D56}" | "\u{D5F}".."\u{D61}" | "\u{D7A}".."\u{D7F}" | "\u{D85}".."\u{D96}" | "\u{D9A}".."\u{DB1}" | "\u{DB3}".."\u{DBB}" | "\u{DBD}" | "\u{DC0}".."\u{DC6}" | "\u{E01}".."\u{E30}" | "\u{E32}".."\u{E33}" | "\u{E40}".."\u{E45}" | "\u{E81}".."\u{E82}" | "\u{E84}" | "\u{E87}".."\u{E88}" | "\u{E8A}" | "\u{E8D}" | "\u{E94}".."\u{E97}" | "\u{E99}".."\u{E9F}" | "\u{EA1}".."\u{EA3}" | "\u{EA5}" | "\u{EA7}" | "\u{EAA}".."\u{EAB}" | "\u{EAD}".."\u{EB0}" | "\u{EB2}".."\u{EB3}" | "\u{EBD}" | "\u{EC0}".."\u{EC4}" | "\u{EDC}".."\u{EDF}" | "\u{F00}" | "\u{F40}".."\u{F47}" | "\u{F49}".."\u{F6C}" | "\u{F88}".."\u{F8C}" | "\u{1000}".."\u{102A}" | "\u{103F}" | "\u{1050}".."\u{1055}" | "\u{105A}".."\u{105D}" | "\u{1061}" | "\u{1065}".."\u{1066}" | "\u{106E}".."\u{1070}" | "\u{1075}".."\u{1081}" | "\u{108E}" | "\u{1100}".."\u{1248}" | "\u{124A}".."\u{124D}" | "\u{1250}".."\u{1256}" | "\u{1258}" | "\u{125A}".."\u{125D}" | "\u{1260}".."\u{1288}" | "\u{128A}".."\u{128D}" | "\u{1290}".."\u{12B0}" | "\u{12B2}".."\u{12B5}" | "\u{12B8}".."\u{12BE}" | "\u{12C0}" | "\u{12C2}".."\u{12C5}" | "\u{12C8}".."\u{12D6}" | "\u{12D8}".."\u{1310}" | "\u{1312}".."\u{1315}" | "\u{1318}".."\u{135A}" | "\u{1380}".."\u{138F}" | "\u{1401}".."\u{166C}" | "\u{166F}".."\u{167F}" | "\u{1681}".."\u{169A}" | "\u{16A0}".."\u{16EA}" | "\u{16F1}".."\u{16F8}" | "\u{1700}".."\u{170C}" | "\u{170E}".."\u{1711}" | "\u{1720}".."\u{1731}" | "\u{1740}".."\u{1751}" | "\u{1760}".."\u{176C}" | "\u{176E}".."\u{1770}" | "\u{1780}".."\u{17B3}" | "\u{17DC}" | "\u{1820}".."\u{1842}" | "\u{1844}".."\u{1878}" | "\u{1880}".."\u{1884}" | "\u{1887}".."\u{18A8}" | "\u{18AA}" | "\u{18B0}".."\u{18F5}" | "\u{1900}".."\u{191E}" | "\u{1950}".."\u{196D}" | "\u{1970}".."\u{1974}" | "\u{1980}".."\u{19AB}" | "\u{19B0}".."\u{19C9}" | "\u{1A00}".."\u{1A16}" | "\u{1A20}".."\u{1A54}" | "\u{1B05}".."\u{1B33}" | "\u{1B45}".."\u{1B4B}" | "\u{1B83}".."\u{1BA0}" | "\u{1BAE}".."\u{1BAF}" | "\u{1BBA}".."\u{1BE5}" | "\u{1C00}".."\u{1C23}" | "\u{1C4D}".."\u{1C4F}" | "\u{1C5A}".."\u{1C77}" | "\u{1CE9}".."\u{1CEC}" | "\u{1CEE}".."\u{1CF1}" | "\u{1CF5}".."\u{1CF6}" | "\u{2135}".."\u{2138}" | "\u{2D30}".."\u{2D67}" | "\u{2D80}".."\u{2D96}" | "\u{2DA0}".."\u{2DA6}" | "\u{2DA8}".."\u{2DAE}" | "\u{2DB0}".."\u{2DB6}" | "\u{2DB8}".."\u{2DBE}" | "\u{2DC0}".."\u{2DC6}" | "\u{2DC8}".."\u{2DCE}" | "\u{2DD0}".."\u{2DD6}" | "\u{2DD8}".."\u{2DDE}" | "\u{3006}" | "\u{303C}" | "\u{3041}".."\u{3096}" | "\u{309F}" | "\u{30A1}".."\u{30FA}" | "\u{30FF}" | "\u{3105}".."\u{312F}" | "\u{3131}".."\u{318E}" | "\u{31A0}".."\u{31BA}" | "\u{31F0}".."\u{31FF}" | "\u{3400}".."\u{4DB5}" | "\u{4E00}".."\u{9FEF}" | "\u{A000}".."\u{A014}" | "\u{A016}".."\u{A48C}" | "\u{A4D0}".."\u{A4F7}" | "\u{A500}".."\u{A60B}" | "\u{A610}".."\u{A61F}" | "\u{A62A}".."\u{A62B}" | "\u{A66E}" | "\u{A6A0}".."\u{A6E5}" | "\u{A78F}" | "\u{A7F7}" | "\u{A7FB}".."\u{A801}" | "\u{A803}".."\u{A805}" | "\u{A807}".."\u{A80A}" | "\u{A80C}".."\u{A822}" | "\u{A840}".."\u{A873}" | "\u{A882}".."\u{A8B3}" | "\u{A8F2}".."\u{A8F7}" | "\u{A8FB}" | "\u{A8FD}".."\u{A8FE}" | "\u{A90A}".."\u{A925}" | "\u{A930}".."\u{A946}" | "\u{A960}".."\u{A97C}" | "\u{A984}".."\u{A9B2}" | "\u{A9E0}".."\u{A9E4}" | "\u{A9E7}".."\u{A9EF}" | "\u{A9FA}".."\u{A9FE}" | "\u{AA00}".."\u{AA28}" | "\u{AA40}".."\u{AA42}" | "\u{AA44}".."\u{AA4B}" | "\u{AA60}".."\u{AA6F}" | "\u{AA71}".."\u{AA76}" | "\u{AA7A}" | "\u{AA7E}".."\u{AAAF}" | "\u{AAB1}" | "\u{AAB5}".."\u{AAB6}" | "\u{AAB9}".."\u{AABD}" | "\u{AAC0}" | "\u{AAC2}" | "\u{AADB}".."\u{AADC}" | "\u{AAE0}".."\u{AAEA}" | "\u{AAF2}" | "\u{AB01}".."\u{AB06}" | "\u{AB09}".."\u{AB0E}" | "\u{AB11}".."\u{AB16}" | "\u{AB20}".."\u{AB26}" | "\u{AB28}".."\u{AB2E}" | "\u{ABC0}".."\u{ABE2}" | "\u{AC00}".."\u{D7A3}" | "\u{D7B0}".."\u{D7C6}" | "\u{D7CB}".."\u{D7FB}" | "\u{F900}".."\u{FA6D}" | "\u{FA70}".."\u{FAD9}" | "\u{FB1D}" | "\u{FB1F}".."\u{FB28}" | "\u{FB2A}".."\u{FB36}" | "\u{FB38}".."\u{FB3C}" | "\u{FB3E}" | "\u{FB40}".."\u{FB41}" | "\u{FB43}".."\u{FB44}" | "\u{FB46}".."\u{FBB1}" | "\u{FBD3}".."\u{FD3D}" | "\u{FD50}".."\u{FD8F}" | "\u{FD92}".."\u{FDC7}" | "\u{FDF0}".."\u{FDFB}" | "\u{FE70}".."\u{FE74}" | "\u{FE76}".."\u{FEFC}" | "\u{FF66}".."\u{FF6F}" | "\u{FF71}".."\u{FF9D}" | "\u{FFA0}".."\u{FFBE}" | "\u{FFC2}".."\u{FFC7}" | "\u{FFCA}".."\u{FFCF}" | "\u{FFD2}".."\u{FFD7}" | "\u{FFDA}".."\u{FFDC}" | "\u{10000}".."\u{1000B}" | "\u{1000D}".."\u{10026}" | "\u{10028}".."\u{1003A}" | "\u{1003C}".."\u{1003D}" | "\u{1003F}".."\u{1004D}" | "\u{10050}".."\u{1005D}" | "\u{10080}".."\u{100FA}" | "\u{10280}".."\u{1029C}" | "\u{102A0}".."\u{102D0}" | "\u{10300}".."\u{1031F}" | "\u{1032D}".."\u{10340}" | "\u{10342}".."\u{10349}" | "\u{10350}".."\u{10375}" | "\u{10380}".."\u{1039D}" | "\u{103A0}".."\u{103C3}" | "\u{103C8}".."\u{103CF}" | "\u{10450}".."\u{1049D}" | "\u{10500}".."\u{10527}" | "\u{10530}".."\u{10563}" | "\u{10600}".."\u{10736}" | "\u{10740}".."\u{10755}" | "\u{10760}".."\u{10767}" | "\u{10800}".."\u{10805}" | "\u{10808}" | "\u{1080A}".."\u{10835}" | "\u{10837}".."\u{10838}" | "\u{1083C}" | "\u{1083F}".."\u{10855}" | "\u{10860}".."\u{10876}" | "\u{10880}".."\u{1089E}" | "\u{108E0}".."\u{108F2}" | "\u{108F4}".."\u{108F5}" | "\u{10900}".."\u{10915}" | "\u{10920}".."\u{10939}" | "\u{10980}".."\u{109B7}" | "\u{109BE}".."\u{109BF}" | "\u{10A00}" | "\u{10A10}".."\u{10A13}" | "\u{10A15}".."\u{10A17}" | "\u{10A19}".."\u{10A35}" | "\u{10A60}".."\u{10A7C}" | "\u{10A80}".."\u{10A9C}" | "\u{10AC0}".."\u{10AC7}" | "\u{10AC9}".."\u{10AE4}" | "\u{10B00}".."\u{10B35}" | "\u{10B40}".."\u{10B55}" | "\u{10B60}".."\u{10B72}" | "\u{10B80}".."\u{10B91}" | "\u{10C00}".."\u{10C48}" | "\u{10D00}".."\u{10D23}" | "\u{10F00}".."\u{10F1C}" | "\u{10F27}" | "\u{10F30}".."\u{10F45}" | "\u{11003}".."\u{11037}" | "\u{11083}".."\u{110AF}" | "\u{110D0}".."\u{110E8}" | "\u{11103}".."\u{11126}" | "\u{11144}" | "\u{11150}".."\u{11172}" | "\u{11176}" | "\u{11183}".."\u{111B2}" | "\u{111C1}".."\u{111C4}" | "\u{111DA}" | "\u{111DC}" | "\u{11200}".."\u{11211}" | "\u{11213}".."\u{1122B}" | "\u{11280}".."\u{11286}" | "\u{11288}" | "\u{1128A}".."\u{1128D}" | "\u{1128F}".."\u{1129D}" | "\u{1129F}".."\u{112A8}" | "\u{112B0}".."\u{112DE}" | "\u{11305}".."\u{1130C}" | "\u{1130F}".."\u{11310}" | "\u{11313}".."\u{11328}" | "\u{1132A}".."\u{11330}" | "\u{11332}".."\u{11333}" | "\u{11335}".."\u{11339}" | "\u{1133D}" | "\u{11350}" | "\u{1135D}".."\u{11361}" | "\u{11400}".."\u{11434}" | "\u{11447}".."\u{1144A}" | "\u{11480}".."\u{114AF}" | "\u{114C4}".."\u{114C5}" | "\u{114C7}" | "\u{11580}".."\u{115AE}" | "\u{115D8}".."\u{115DB}" | "\u{11600}".."\u{1162F}" | "\u{11644}" | "\u{11680}".."\u{116AA}" | "\u{11700}".."\u{1171A}" | "\u{11800}".."\u{1182B}" | "\u{118FF}" | "\u{11A00}" | "\u{11A0B}".."\u{11A32}" | "\u{11A3A}" | "\u{11A50}" | "\u{11A5C}".."\u{11A83}" | "\u{11A86}".."\u{11A89}" | "\u{11A9D}" | "\u{11AC0}".."\u{11AF8}" | "\u{11C00}".."\u{11C08}" | "\u{11C0A}".."\u{11C2E}" | "\u{11C40}" | "\u{11C72}".."\u{11C8F}" | "\u{11D00}".."\u{11D06}" | "\u{11D08}".."\u{11D09}" | "\u{11D0B}".."\u{11D30}" | "\u{11D46}" | "\u{11D60}".."\u{11D65}" | "\u{11D67}".."\u{11D68}" | "\u{11D6A}".."\u{11D89}" | "\u{11D98}" | "\u{11EE0}".."\u{11EF2}" | "\u{12000}".."\u{12399}" | "\u{12480}".."\u{12543}" | "\u{13000}".."\u{1342E}" | "\u{14400}".."\u{14646}" | "\u{16800}".."\u{16A38}" | "\u{16A40}".."\u{16A5E}" | "\u{16AD0}".."\u{16AED}" | "\u{16B00}".."\u{16B2F}" | "\u{16B63}".."\u{16B77}" | "\u{16B7D}".."\u{16B8F}" | "\u{16F00}".."\u{16F44}" | "\u{16F50}" | "\u{17000}".."\u{187F1}" | "\u{18800}".."\u{18AF2}" | "\u{1B000}".."\u{1B11E}" | "\u{1B170}".."\u{1B2FB}" | "\u{1BC00}".."\u{1BC6A}" | "\u{1BC70}".."\u{1BC7C}" | "\u{1BC80}".."\u{1BC88}" | "\u{1BC90}".."\u{1BC99}" | "\u{1E800}".."\u{1E8C4}" | "\u{1EE00}".."\u{1EE03}" | "\u{1EE05}".."\u{1EE1F}" | "\u{1EE21}".."\u{1EE22}" | "\u{1EE24}" | "\u{1EE27}" | "\u{1EE29}".."\u{1EE32}" | "\u{1EE34}".."\u{1EE37}" | "\u{1EE39}" | "\u{1EE3B}" | "\u{1EE42}" | "\u{1EE47}" | "\u{1EE49}" | "\u{1EE4B}" | "\u{1EE4D}".."\u{1EE4F}" | "\u{1EE51}".."\u{1EE52}" | "\u{1EE54}" | "\u{1EE57}" | "\u{1EE59}" | "\u{1EE5B}" | "\u{1EE5D}" | "\u{1EE5F}" | "\u{1EE61}".."\u{1EE62}" | "\u{1EE64}" | "\u{1EE67}".."\u{1EE6A}" | "\u{1EE6C}".."\u{1EE72}" | "\u{1EE74}".."\u{1EE77}" | "\u{1EE79}".."\u{1EE7C}" | "\u{1EE7E}" | "\u{1EE80}".."\u{1EE89}" | "\u{1EE8B}".."\u{1EE9B}" | "\u{1EEA1}".."\u{1EEA3}" | "\u{1EEA5}".."\u{1EEA9}" | "\u{1EEAB}".."\u{1EEBB}" | "\u{20000}".."\u{2A6D6}" | "\u{2A700}".."\u{2B734}" | "\u{2B740}".."\u{2B81D}" | "\u{2B820}".."\u{2CEA1}" | "\u{2CEB0}".."\u{2EBE0}" | "\u{2F800}".."\u{2FA1D}"
  unicode_letter <- unicode_upper | unicode_lower | unicode_titlecase | unicode_modifier | unicode_other_letter
}
