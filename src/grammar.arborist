// The Arborist PEG definition language is a derivation of the Ohm PEG definition langauge.
// The Ohm PEG definition language is documented at https://github.com/harc/ohm/blob/master/src/ohm-grammar.ohm
// The Arborist language adds capture/match labels and the dot operator, and removes (1) parameterized rules, 
# (2) the lexification operator, and (3) grammar inheritance.
// If it becomes painful to write grammars without (1), (2), or (3), I will add the necessary missing feature back in.

Arborist {
  Grammar
    = ident "{" Rule* "}"   -- named
    | Rule*                 -- unnamed
  
  Rule
    = ident "=" RuleBody

  RuleBody
    = "|"? TopLevelTerm ("|" TopLevelTerm)*

  // rename this to TopLevelAlt
  TopLevelTerm
    = Seq caseName  -- inline
    | Seq           -- seq

  Alt
    = Seq ("|" Seq)*

  Seq
    = Pred*

  Pred
    = "~" Iter  -- neg
    | "&" Iter  -- pos
    | Iter      -- iter
  
  Iter
    = Label "*"  -- star
    | Label "+"  -- plus
    | Label "?"  -- opt
    | Label      -- label

  Label
    = ident "=" Base  -- label
    | Base            -- base

//  Lex
//    = "#" Base  -- lex
//    | Base

  Base
    = ident ~("=")                              -- application
    | oneCharTerminal ".." oneCharTerminal      -- range
    | terminal                                  -- terminal
    | "(" Alt ")"                               -- group
    | "."                                       -- dot

  // rename this to altName
  caseName
    = "--" (~"\n" space)* name (~"\n" space)* ("\n" | &"}")

  name  (a name)
    = nameFirst nameRest*

  nameFirst
    = "_"
    | letter

  nameRest
    = "_"
    | alnum

  ident  (an identifier)
    = name

  terminal
    = "\"" terminalChar* "\""

  oneCharTerminal
    = "\"" terminalChar "\""

  terminalChar
    = escapeChar            -- escape
    | ~"\\" ~"\"" ~"\n" char=.   -- char

  // an escape sequence
  escapeChar
    = "\\\\"                                     -- backslash
    | "\\\""                                     -- doubleQuote
    | "\\\'"                                     -- singleQuote
    | "\\b"                                      -- backspace
    | "\\n"                                      -- lineFeed
    | "\\r"                                      -- carriageReturn
    | "\\t"                                      -- tab
    | "\\u" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape
    | "\\x" hexDigit hexDigit                    -- hexEscape

  space
    = "\u0000".." "
    | comment

  // The `skip` rule is special, in that Syntactic rules (rules named with an uppercase first letter) will skip/ignore any number of
  // matches of the `skip` rule occurring immediately prior to or immediately following any of the terms that make up the rule body.
  // In other words, the rule `Foo = "bar" "baz"` would match on the string "  \n\tbar      \t\t\n\n    baz \t\n "", and the
  // whitespace in between the terms would be ignored.
  skip
    = "\u0000".." "

  comment
    = "//" (~"\n" .)* "\n"  -- singleLine
    | "/*" (~"*/" .)* "*/"  -- multiLine

  tokens = token*

  token = caseName | comment | ident | operator | punctuation | terminal | .

  operator = "=" | "*" | "+" | "?" | "~" | "&"

  punctuation = "<" | ">" | "," | "--"

  hexDigit = "0".."9" | "A".."F" | "a".."f"
}